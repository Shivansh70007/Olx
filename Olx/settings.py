"""
Django settings for Olx project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

from datetime import timedelta
import os
import dj_database_url   # needs to be imported for postgre in render

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-9eq9^o7vj)yj6z99n$h*v7ugm+lt*!_f32c*25f-bj04)rmdu2'

SECRET_KEY = os.environ.get("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

DEBUG = os.environ.get("DEBUG","False").lower() == "true"

# ALLOWED_HOSTS = []

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS").split(" ")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'Products',
    'corsheaders',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication', 
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ]
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'Olx.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Olx.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

database_url = os.environ.get("DATABASE_URL")

DATABASES["default"] = dj_database_url.parse(database_url)

# DATABASES["default"] = dj_database_url.parse("your link of postgrel")
# DATABASES["default"] = dj_database_url.parse("postgresql://shiv_user:zAVyd3Hq2vdl5URXHdRq7YA4YSUJJ4yv@dpg-ctrqssjqf0us73djfpo0-a.oregon-postgres.render.com/shiv")

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




# Allow CORS for your frontend domain (adjust the domain if needed)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # Vite dev server (React)
    # "http://localhost:3000",  # Vite dev server (React)  #---> by this was running also
]

CORS_ALLOW_ALL_ORIGINS = True  # For development purposes, allow all origins
# after adding this now the data is showing i think it was set to "false before"..

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=10),
}


#steps for using postgre and creating free database in render

# 1. crete your id in render then click on new then choose pstgre then name your db then create

# 2. then choose create above then external and paste in in your 
#   # DATABASES["default"] = dj_database_url.parse("your link of postgrel")



# before pip install dj-database-url
# 3. Import then dj_database_url

# 4. then do makemigrations and migrate 
# 5. then it will itself ask to install pofsm2 install then migrate

# 6 . run your backend and frontend and now the products you will add gets stored in your new database and
#     old data will be removed ..


# 7. now pushing in git -- if you have pushed your project backend in your repository only the bacend
#    not your Env folder only your project folder you wanna push ok 

# 8. Go to github then make new repository then make it come to your terminal of your project folder
# 9. git init   ---> this will initialize and make .git folder 
# Create the .gitignore file (manually):

# Open a text editor, paste the ignore rules, and save it as .gitignore.

# in .gitignore file save as allfiled and contents include 

# Python bytecode files
# *.pyc
# *.pyo
# __pycache__

# # Virtual environment
# /env/

# # Database file (SQLite)
# db.sqlite3

# # Static files and media (optional)
# static/
# media/

# # Log files
# *.log

# # macOS system files
# .DS_Store

# # IDE files (e.g., for JetBrains IDEs like PyCharm)
# .idea/

# # Translation files
# *.pot
# Add files to Git:


# 10.

# git add .
# Commit the changes:

# 11. git commit -m "Initial commit"
# Create a repository on GitHub (or another Git service).

# Add the remote repository:

# 12.  git remote add origin https://github.com/your-username/your-repository.git
# Push your code:

# git push -u origin master   # or 'git push -u origin main'